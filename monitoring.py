import gspread
import json
import os
from oauth2client.service_account import ServiceAccountCredentials
from google_play_scraper import app
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import time

# üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")

creds_json = os.getenv("GOOGLE_CREDENTIALS")
if not creds_json:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
])
client = gspread.authorize(creds)

spreadsheet_id = "1DpbYJ5f6zdhIl1zDtn6Z3aCHZRDFTaqhsCrkzNM9Iqo"
sheet = client.open_by_key(spreadsheet_id).sheet1
log_sheet = client.open_by_key(spreadsheet_id).worksheet("Changes Log")

all_values = sheet.get_all_values()
apps_google_play = all_values[1:]

log_buffer = []
known_log_entries = set()

def remove_old_ban_log(package_name):
    try:
        all_logs = log_sheet.get_all_values()
        updated_logs = []
        removed = False
        for row in all_logs:
            if len(row) >= 4 and row[1] == "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" and row[3] == package_name:
                removed = True
            else:
                updated_logs.append(row)
        if removed:
            log_sheet.clear()
            log_sheet.append_rows(updated_logs)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å '–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –¥–ª—è {package_name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä–æ–≥–æ –ª–æ–≥–∞: {e}")

def log_change(change_type, app_number, package_name):
    print(f"üìå –õ–æ–≥–∏—Ä—É–µ–º: {change_type} - {package_name}")
    if change_type == "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä":
        remove_old_ban_log(package_name)
    log_buffer.append([datetime.today().strftime("%Y-%m-%d"), change_type, app_number, package_name])

def flush_log():
    global log_buffer
    if log_buffer:
        try:
            log_sheet.append_rows(log_buffer)
            print(f"‚úÖ –í –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω–æ {len(log_buffer)} –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
            for row in log_buffer:
                print(f"   ‚ûï {row}")
            log_buffer = []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ 'Changes Log': {repr(e)}")
            for row in log_buffer:
                print(f"   üö´ –ù–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {row}")

def fetch_google_play_data(package_name, app_number, existing_status, existing_release_date, existing_not_found_date):
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {package_name}...")
        time.sleep(0.5)
        data = app(package_name)

        status = "ready"
        developer_name = data.get("developer", "")
        release_date = data.get("released")
        last_updated = data.get("updated")

        def convert_timestamp(value):
            if isinstance(value, int) and value > 1000000000:
                return datetime.utcfromtimestamp(value).strftime("%Y-%m-%d")
            return value

        release_date = convert_timestamp(release_date)
        last_updated = convert_timestamp(last_updated)

        final_date = release_date if release_date else last_updated or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        not_found_date = ""

        return [package_name, status, final_date, not_found_date, developer_name]

    except Exception:
        return None

def fetch_all_data():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
    apps_list = []
    for row in apps_google_play:
        if len(row) >= 8 and row[7]:
            apps_list.append((row[0], row[7], row[3], row[5], row[6]))

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(apps_list)} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

    remaining = apps_list
    results = []
    max_attempts = 5

    for attempt in range(max_attempts):
        print(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}")
        with ThreadPoolExecutor(max_workers=5) as executor:
            partial_results = list(executor.map(
                lambda x: fetch_google_play_data(x[1], x[0], x[2], x[3], x[4]), remaining
            ))

        next_remaining = []
        for i, result in enumerate(partial_results):
            if result is None:
                next_remaining.append(remaining[i])
            else:
                results.append(result)

        if not next_remaining:
            break
        if attempt < max_attempts - 1:
            print("‚è≥ –û–∂–∏–¥–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(5)
        remaining = next_remaining

    for row in remaining:
        app_number, package_name, status, release, not_found = row
        not_found_date = not_found or datetime.today().strftime("%Y-%m-%d")

        results.append([package_name, "ban", release, not_found_date, ""])

    return results

def update_google_sheets(sheet, data):
    print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...")
    all_values = sheet.get_all_values()
    apps_google_play = all_values[1:]

    updates = []
    ready_count = 0
    color_updates = []
    today = datetime.today().strftime("%Y-%m-%d")

    for i, row in enumerate(apps_google_play, start=2):
        if len(row) < 8:
            continue

        app_number     = row[0]
        package_name   = row[7]
        old_status     = row[3]
        old_release    = row[5]
        old_not_found  = row[6]
        old_developer  = row[4]

        for app_data in data:
            if app_data[0] != package_name:
                continue

            new_status    = app_data[1]
            new_release   = app_data[2]
            new_not_found = app_data[3]
            new_developer = app_data[4]

            need_release_update   = old_release in ["", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", None] and new_release not in ["", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", None]
            need_developer_update = new_status == "ready" and old_developer != new_developer

            if (old_status != new_status or
                need_release_update or
                old_not_found != new_not_found or
                need_developer_update):

                updates.append({"range": f"D{i}", "values": [[new_status]]})
                updates.append({"range": f"G{i}", "values": [[new_not_found]]})

                if need_release_update:
                    updates.append({"range": f"F{i}", "values": [[new_release]]})
                if need_developer_update:
                    updates.append({"range": f"E{i}", "values": [[new_developer]]})

                base_key = f"{today}-{app_number}-{package_name}"

                # üìå –õ–æ–≥–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                if old_status in ["", None] and new_status in ["ready", "ban"]:
                    log_key = base_key + "-–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
                    if log_key not in known_log_entries:
                        log_change("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", app_number, package_name)
                        known_log_entries.add(log_key)

                elif old_status == "ban" and new_status == "ready":
                    # –ü–µ—Ä–≤—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –±–∞–Ω–∞ ‚Üí –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å
                    if old_release in ["", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", None] and new_release not in ["", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", None]:
                        log_key = base_key + "-–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å—Ç–æ—Ä–µ"
                        if log_key not in known_log_entries:
                            log_change("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å—Ç–æ—Ä–µ", app_number, package_name)
                            known_log_entries.add(log_key)
                    else:
                        # –£ –Ω–µ–≥–æ —É–∂–µ –∫–æ–≥–¥–∞-—Ç–æ —Å—Ç–æ—è–ª–∞ –¥–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞ ‚Üí —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç
                        log_key = base_key + "-–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä"
                        if log_key not in known_log_entries:
                            log_change("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä", app_number, package_name)
                            known_log_entries.add(log_key)

                elif old_status == "ready" and new_status == "ban":
                    log_key = base_key + "-–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                    if log_key not in known_log_entries:
                        log_change("–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", app_number, package_name)
                        known_log_entries.add(log_key)

            if new_status == "ready":
                ready_count += 1

            color = {"red": 0.8, "green": 1, "blue": 0.8} if new_status == "ready" else {"red": 1, "green": 0.8, "blue": 0.8}
            color_updates.append({"range": f"A{i}", "format": {"backgroundColor": color}})
            break

    if updates:
        sheet.batch_update(updates)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {ready_count}")
    if color_updates:
        sheet.batch_format(color_updates)
    try:
        sheet.update(range_name="J2", values=[[ready_count]])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")

def job():
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    data = fetch_all_data()
    update_google_sheets(sheet, data)
    flush_log()
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

job()
print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –û–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
