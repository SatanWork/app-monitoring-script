import gspread
import json
import os
import time
from oauth2client.service_account import ServiceAccountCredentials
from google_play_scraper import app
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime

print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")

creds_json = os.getenv("GOOGLE_CREDENTIALS")
if not creds_json:
    raise ValueError("‚ùå GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
])
client = gspread.authorize(creds)

spreadsheet_id = "1DpbYJ5f6zdhIl1zDtn6Z3aCHZRDFTaqhsCrkzNM9Iqo"
sheet = client.open_by_key(spreadsheet_id).sheet1
log_sheet = client.open_by_key(spreadsheet_id).worksheet("Changes Log")

log_buffer = []

def remove_old_ban_log(package_name):
    try:
        all_logs = log_sheet.get_all_values()
        updated_logs = []
        removed = False

        for row in all_logs:
            if len(row) >= 4 and row[1] == "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" and row[3] == package_name:
                removed = True
            else:
                updated_logs.append(row)

        if removed:
            log_sheet.clear()
            log_sheet.append_rows(updated_logs)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å '–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –¥–ª—è {package_name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä–æ–≥–æ –ª–æ–≥–∞: {e}")

def log_change(change_type, app_number, package_name):
    print(f"üìå –õ–æ–≥–∏—Ä—É–µ–º: {change_type} - {package_name}")
    if change_type == "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä":
        remove_old_ban_log(package_name)
    log_buffer.append([datetime.today().strftime("%Y-%m-%d"), change_type, app_number, package_name])

def flush_log():
    global log_buffer
    if log_buffer:
        try:
            log_sheet.append_rows(log_buffer)
            print(f"‚úÖ –í –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω–æ {len(log_buffer)} –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            log_buffer = []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ 'Changes Log': {e}")

def convert_timestamp(value):
    if isinstance(value, int) and value > 1000000000:
        return datetime.utcfromtimestamp(value).strftime("%Y-%m-%d")
    return value

def fetch_google_play_data(package_name):
    try:
        time.sleep(0.5)
        data = app(package_name)
        developer = data.get("developer", "")
        release = convert_timestamp(data.get("released"))
        updated = convert_timestamp(data.get("updated"))
        final_date = release or updated or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        return {
            "package": package_name,
            "status": "ready",
            "release": final_date,
            "not_found_date": "",
            "developer": developer,
        }
    except Exception:
        return {
            "package": package_name,
            "status": "ban",
            "release": "",
            "not_found_date": datetime.today().strftime("%Y-%m-%d"),
            "developer": ""
        }

def retry_fetch(apps, retries=3, delay=30):
    for attempt in range(retries):
        print(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {retries}")
        with ThreadPoolExecutor(max_workers=3) as executor:
            results = list(executor.map(lambda pkg: fetch_google_play_data(pkg[1]), apps))

        not_found = [app for app, result in zip(apps, results) if result["status"] == "ban" and result["developer"] == ""]
        found = [result for result in results if result["status"] == "ready" or result["developer"]]

        if not not_found or attempt == retries - 1:
            return found + [fetch_google_play_data(pkg[1]) for pkg in not_found]
        time.sleep(delay)

def update_google_sheets(data):
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")
    current_data = sheet.get_all_values()
    apps_google_play = current_data[1:]

    updates = []
    ready_count = 0
    color_updates = []

    for i, row in enumerate(apps_google_play, start=2):
        if len(row) < 8 or not row[7]:
            continue
        package = row[7]
        match = next((d for d in data if d["package"] == package), None)
        if not match:
            continue

        old_status = row[3]
        new_status = match["status"]

        if old_status != new_status:
            if old_status == "ban" and new_status == "ready":
                log_change("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä", row[0], package)
            elif old_status not in ["ban", "", None] and new_status == "ban":
                log_change("–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", row[0], package)
            elif old_status in ["", None] and new_status == "ready":
                log_change("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", row[0], package)

        updates.extend([
            {"range": f"D{i}", "values": [[new_status]]},
            {"range": f"F{i}", "values": [[match['release']]]},
            {"range": f"G{i}", "values": [[match['not_found_date']]]},
            {"range": f"E{i}", "values": [[match['developer']]]},
        ])

        color = {"red": 0.8, "green": 1, "blue": 0.8} if new_status == "ready" else {"red": 1, "green": 0.8, "blue": 0.8}
        color_updates.append({"range": f"A{i}", "format": {"backgroundColor": color}})

        if new_status == "ready":
            ready_count += 1

    if updates:
        try:
            sheet.batch_update(updates)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    if color_updates:
        try:
            sheet.batch_format(color_updates)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    try:
        sheet.update(range_name="J2", values=[[ready_count]])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞: {e}")

def job():
    print("üöÄ –°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏...")
    apps_list = [row for row in apps_google_play if len(row) >= 8 and row[7]]
    data = retry_fetch(apps_list)
    update_google_sheets(data)
    flush_log()
    print("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

job()
print("‚è≥ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –û–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.")
