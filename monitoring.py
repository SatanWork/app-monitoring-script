import gspread
import json
import os
from oauth2client.service_account import ServiceAccountCredentials
from google_play_scraper import app
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import time

# üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
creds_json = os.getenv("GOOGLE_CREDENTIALS")
if not creds_json:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
])
client = gspread.authorize(creds)

spreadsheet_id = "1DpbYJ5f6zdhIl1zDtn6Z3aCHZRDFTaqhsCrkzNM9Iqo"
sheet = client.open_by_key(spreadsheet_id).sheet1  # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
all_values = sheet.get_all_values()
apps_google_play = all_values[1:]  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Å—Ç "Changes Log", –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º
try:
    log_sheet = client.open_by_key(spreadsheet_id).worksheet("Changes Log")
except gspread.exceptions.WorksheetNotFound:
    print("‚ùå –õ–∏—Å—Ç 'Changes Log' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ...")
    log_sheet = client.open_by_key(spreadsheet_id).add_worksheet(title="Changes Log", rows="1000", cols="4")
    log_sheet.append_row(["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–ù–æ–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "Package"])  # –ó–∞–≥–æ–ª–æ–≤–∫–∏

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ª–æ–≥–∞ "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä
def remove_old_ban_log(package_name):
    try:
        spreadsheet = client.open_by_key(spreadsheet_id)
        log_sheet = spreadsheet.worksheet("Changes Log")

        all_logs = log_sheet.get_all_values()
        updated_logs = []
        removed = False

        for row in all_logs:
            if len(row) >= 4 and row[1] == "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" and row[3] == package_name:
                removed = True  # –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", —É–¥–∞–ª—è–µ–º
            else:
                updated_logs.append(row)  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏

        if removed:
            log_sheet.clear()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ª–æ–≥-–ª–∏—Å—Ç
            log_sheet.append_rows(updated_logs)  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±–µ–∑ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å '–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –¥–ª—è {package_name}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä–æ–≥–æ –ª–æ–≥–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥ —Å —É—á—ë—Ç–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å—Ç–æ—Ä
log_buffer = []

def log_change(change_type, app_number, package_name):
    print(f"üìå –õ–æ–≥–∏—Ä—É–µ–º: {change_type} - {package_name}")

    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    if change_type == "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä":
        remove_old_ban_log(package_name)

    log_buffer.append([datetime.today().strftime("%Y-%m-%d"), change_type, app_number, package_name])

def flush_log():
    global log_buffer
    if log_buffer:
        try:
            log_sheet.append_rows(log_buffer)
            print(f"‚úÖ –í –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω–æ {len(log_buffer)} –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            log_buffer = []  # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ 'Changes Log': {e}")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
def fetch_google_play_data(package_name, app_number, existing_status, existing_release_date, existing_not_found_date):
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {package_name}...")

        time.sleep(0.5)
        data = app(package_name)

        status = "ready"

        release_date = data.get("released")
        last_updated = data.get("updated")

        def convert_timestamp(value):
            if isinstance(value, int) and value > 1000000000:
                return datetime.utcfromtimestamp(value).strftime("%Y-%m-%d")
            return value

        release_date = convert_timestamp(release_date)
        last_updated = convert_timestamp(last_updated)

        final_date = release_date if release_date else last_updated or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        not_found_date = ""

        print(f"üìÖ –î–∞—Ç–∞ {package_name}: {final_date}")
        print(f"üîÑ {existing_status} ‚Üí {status}")

        # üî• **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è**
        if existing_status in ["", None]:  
            log_change("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", app_number, package_name)
        elif existing_status == "ban" and status == "ready":
            log_change("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å—Ç–æ—Ä–µ", app_number, package_name)

        return [package_name, status, final_date, not_found_date]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {package_name}: {e}")
        status = "ban"
        not_found_date = existing_not_found_date or datetime.today().strftime("%Y-%m-%d")

        # üî• **–¢–µ–ø–µ—Ä—å –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±—ã–ª –ø—É—Å—Ç—ã–º ‚Äì —ç—Ç–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–æ**
        if existing_status in ["", None]:  
            log_change("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", app_number, package_name)
        elif existing_status not in ["ban", None, ""]:
            log_change("–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", app_number, package_name)

        return [package_name, status, existing_release_date, not_found_date]

# **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π**
def fetch_all_data():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
    apps_list = []

    for row in apps_google_play:
        if len(row) >= 8 and row[7]:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –ø–∞–∫–µ—Ç
            apps_list.append((row[0], row[7], row[3], row[5], row[6]))

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(apps_list)} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    with ThreadPoolExecutor(max_workers=5) as executor:
        return list(executor.map(lambda x: fetch_google_play_data(x[1], x[0], x[2], x[3], x[4]), apps_list))

# **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets**
def update_google_sheets(sheet, data):
    print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...")
    all_values = sheet.get_all_values()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    apps_google_play = all_values[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏

    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets...")

    updates = []
    ready_count = 0  
    color_updates = []

    for i, row in enumerate(apps_google_play, start=2):  # –°—Ç–∞—Ä—Ç—É–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
        package_name = row[7]  # Package –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for app_data in data:
            if app_data[0] == package_name:
                updates.append({"range": f"D{i}", "values": [[app_data[1]]]})
                updates.append({"range": f"F{i}", "values": [[app_data[2]]]})
                updates.append({"range": f"G{i}", "values": [[app_data[3]]]})

                if app_data[1] == "ready":
                    ready_count += 1

                # –¶–≤–µ—Ç —è—á–µ–π–∫–∏ (–∑–µ–ª—ë–Ω—ã–π - `ready`, –∫—Ä–∞—Å–Ω—ã–π - `ban`)
                color = {"red": 0.8, "green": 1, "blue": 0.8} if app_data[1] == "ready" else {"red": 1, "green": 0.8, "blue": 0.8}
                color_updates.append({"range": f"A{i}", "format": {"backgroundColor": color}})

                break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é

    if updates:
        try:
            sheet.batch_update(updates)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {ready_count}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    if color_updates:
        try:
            sheet.batch_format(color_updates)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —è—á–µ–µ–∫: {e}")

    # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    try:
        sheet.update(range_name="J2", values=[[ready_count]])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")

# **–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è**
def job():
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    data = fetch_all_data()
    update_google_sheets(sheet, data)
    flush_log()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

job()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É

print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –û–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
