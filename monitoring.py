import gspread
import json
import os
from oauth2client.service_account import ServiceAccountCredentials
from google_play_scraper import app
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(message)s')

# üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
logging.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")
creds_json = os.getenv("GOOGLE_CREDENTIALS")
if not creds_json:
    raise ValueError("‚ùå GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
])
client = gspread.authorize(creds)

spreadsheet_id = "1DpbYJ5f6zdhIl1zDtn6Z3aCHZRDFTaqhsCrkzNM9Iqo"
sheet = client.open_by_key(spreadsheet_id).sheet1
all_values = sheet.get_all_values()
apps_google_play = all_values[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

# üßæ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Changes Log
try:
    log_sheet = client.open_by_key(spreadsheet_id).worksheet("Changes Log")
except gspread.exceptions.WorksheetNotFound:
    log_sheet = client.open_by_key(spreadsheet_id).add_worksheet(title="Changes Log", rows="1000", cols="4")
    log_sheet.append_row(["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–ù–æ–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "Package"])

# üßπ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π –≤ Changes Log (–ø–æ –¢–∏–ø—É, –ù–æ–º–µ—Ä—É, Package)
def remove_duplicates_from_log():
    try:
        all_logs = log_sheet.get_all_values()
        if not all_logs:
            return
        headers = all_logs[0]
        entries = all_logs[1:]
        seen = set()
        cleaned = [headers]
        for row in entries:
            if len(row) >= 4:
                key = (row[1], row[2], row[3])
                if key not in seen:
                    seen.add(key)
                    cleaned.append(row)
        if len(cleaned) != len(all_logs):
            log_sheet.clear()
            log_sheet.append_rows(cleaned)
            logging.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(all_logs)-len(cleaned)} –¥—É–±–ª–µ–π.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–µ–π: {e}")

# üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ package
def check_ban_log_exists(package_name, app_number):
    try:
        logs = log_sheet.get_all_values()[1:]
        for row in logs:
            if len(row) >= 4 and row[1] == "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" and row[2] == app_number and row[3] == package_name:
                return True
        return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∞: {e}")
        return False

# üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ package
def remove_old_ban_log(package_name, app_number):
    try:
        all_logs = log_sheet.get_all_values()
        updated_logs = []
        removed = False
        for row in all_logs:
            if len(row) >= 4 and row[1] == "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" and row[2] == app_number and row[3] == package_name:
                removed = True
            else:
                updated_logs.append(row)
        if removed:
            log_sheet.clear()
            log_sheet.append_rows(updated_logs)
            logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å '–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –¥–ª—è {package_name} (‚Ññ {app_number})")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")

# üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±—É—Ñ–µ—Ä –¥–ª—è batch-–∑–∞–ø–∏—Å–∏)
log_buffer = []

def log_change(change_type, app_number, package_name):
    date_str = datetime.today().strftime("%Y-%m-%d")
    key = (change_type, app_number, package_name)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö
    existing = log_sheet.get_all_values()[1:]
    for row in existing:
        if len(row) >= 4 and (row[1], row[2], row[3]) == key:
            logging.info(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {change_type} ‚Äì {app_number}")
            return
    # –ï—Å–ª–∏ —Ç–∏–ø = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä", —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    if change_type == "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä":
        remove_old_ban_log(package_name, app_number)
    log_buffer.append([date_str, change_type, app_number, package_name])
    logging.info(f"üìå –õ–æ–≥: {change_type} ‚Äì {app_number} ({package_name})")

def flush_log():
    global log_buffer
    if log_buffer:
        try:
            log_sheet.append_rows(log_buffer)
            logging.info(f"‚úÖ –í –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω–æ: {len(log_buffer)} —Å—Ç—Ä–æ–∫.")
            log_buffer = []
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

# üì≤ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [package, status, final_date, not_found_date])
def fetch_google_play_data(package_name, app_number, existing_status, existing_release_date, existing_not_found_date):
    try:
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {package_name} (‚Ññ {app_number})...")
        time.sleep(0.5)
        details = app(package_name)
        status = "ready"
        def convert_timestamp(val):
            if isinstance(val, int) and val > 1000000000:
                return datetime.utcfromtimestamp(val).strftime("%Y-%m-%d")
            return val
        release_date = convert_timestamp(details.get("released"))
        last_updated = convert_timestamp(details.get("updated"))
        final_date = release_date or last_updated or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        not_found_date = ""
        logging.info(f"üìÖ –î–∞—Ç–∞: {final_date}")
        logging.info(f"üîÑ –°—Ç–∞—Ç—É—Å: {existing_status} ‚Üí {status}")
        if existing_status in ["", None]:
            log_change("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", app_number, package_name)
        elif existing_status == "ban" and status == "ready":
            if check_ban_log_exists(package_name, app_number):
                log_change("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä", app_number, package_name)
            else:
                log_change("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å—Ç–æ—Ä–µ", app_number, package_name)
        return [package_name, status, final_date, not_found_date]
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        status = "ban"
        not_found_date = existing_not_found_date or datetime.today().strftime("%Y-%m-%d")
        if existing_status in ["", None]:
            log_change("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", app_number, package_name)
        elif existing_status not in ["ban", None, ""]:
            if not check_ban_log_exists(package_name, app_number):
                log_change("–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", app_number, package_name)
            else:
                logging.info(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {package_name}")
        return [package_name, status, existing_release_date, not_found_date]

# üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
def fetch_all_data():
    logging.info("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
    apps_list = [
        (row[0], row[7], row[3], row[5], row[6])
        for row in apps_google_play if len(row) >= 8 and row[7]
    ]
    with ThreadPoolExecutor(max_workers=5) as executor:
        return list(executor.map(lambda x: fetch_google_play_data(*x), apps_list))

# üßæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
def update_google_sheets(sheet, data):
    logging.info("üìã –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
    all_values = sheet.get_all_values()
    main_rows = all_values[1:]
    updates = []
    color_updates = []
    ready_count = 0
    for i, row in enumerate(main_rows, start=2):
        package = row[7]
        for app_data in data:
            if app_data[0] == package:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –¥–∞—Ç—É —Ä–µ–ª–∏–∑–∞ –∏ –¥–∞—Ç—É "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                updates.extend([
                    {"range": f"D{i}", "values": [[app_data[1]]]},
                    {"range": f"F{i}", "values": [[app_data[2]]]},
                    {"range": f"G{i}", "values": [[app_data[3]]]}
                ])
                if app_data[1] == "ready":
                    ready_count += 1
                # –¶–≤–µ—Ç —è—á–µ–π–∫–∏: –∑–µ–ª—ë–Ω—ã–π –¥–ª—è ready, –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è ban
                color = {"red": 0.8, "green": 1, "blue": 0.8} if app_data[1] == "ready" else {"red": 1, "green": 0.8, "blue": 0.8}
                color_updates.append({"range": f"A{i}", "format": {"backgroundColor": color}})
                break
    if updates:
        try:
            sheet.batch_update(updates)
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(updates)//3} —Å—Ç—Ä–æ–∫.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    if color_updates:
        try:
            sheet.batch_format(color_updates)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —è—á–µ–µ–∫: {e}")
    try:
        sheet.update(range_name="J2", values=[[ready_count]])
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ ready: {e}")

# üîÅ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def job():
    logging.info("üîÅ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    data = fetch_all_data()
    update_google_sheets(sheet, data)
    flush_log()            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏ –±–∞—Ç—á–µ–º
    remove_duplicates_from_log()  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ –≤ –ª–æ–≥–∞—Ö
    logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    job()
    logging.info("üïí –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
